# Here we define parameters for the mpc. These are used for generating the mpc with acados and also for running the mpc

/mpc_local_planner:
  mpc_local_planner:
    ros__parameters:
      use_sim_time: true

      # The frequency that the mpc is run at. Given that the pc is able to run the code fast enough.
      loop_Hz: 30

      # The topic where the linear and angular speed of the car is published. The message type should be twist.
      twist_topic: "/twist"

      # The topic where the current steering angle of the car is published. The message type should be Float64
      actual_steering_topic: "/actual_steering_angle"

      # The topic where the desired steering angle is published.
      steering_topic: "/steering_cmd"

      # The topic where the desired throttle value is published
      throttle_topic: "/throttle_cmd"

      # Where tha global path should be published. The path we want to follow. If this parameter is not provided
      # the mpc will use a internal hard coded path.
      # path_topic: "/path"

      # The ""global"" frame. Typically map or odom.
      map_frame: "world"

      # The frame where the car is located. The mpc model assumes that this is the middel of the rear axle.
      car_frame: "base_footprint"

      # Number of steps in the mpc horizon
      mpc_N: 30

      # Solver type used by acados
      nlp_solver_type: "SQP_RTI" #SQP or SQP_RTI

      # Time between the steps in the mpc horizon.
      mpc_dt: 0.35

      # The reference velocity when the car is following a path
      path_tracking_vel: 5.0

      # Range of valid throttle values. Remember to use floats and not Integers
      throttle_range: [-1.0, 1.0]

      # Range of valid throttle derivatives
      throttle_dot_range: [-0.33, 0.33]

      # Maximum steering angle of the car (to the left and right). Given in [rad]
      steering_angle_range: [-0.57, 0.57]

      # Maximum rotation speed of the wheels. How fast the wheels can turn. Given in [rad/s]
      steering_angle_dot_range: [-80.0, 80.0]

      # Distance between front and rear wheels on the car.
      wheelbase: 2.65

      # Ratio between angle on the wheels and the steering wheel. steering_ratio = "steering wheel angle" / "wheel angle"
      steering_ratio: 17.3
  log_node:
    ros__parameters:
      use_sim_time: true

